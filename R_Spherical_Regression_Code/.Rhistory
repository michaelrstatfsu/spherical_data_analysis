)
sum(diag(v[,,j]%*%t(v[,,j])))
sum(diag(v[,,j]%*%t(v[,,j])))
sum(diag(u[,,i]%*%t(v[,,j])))
v[,,j]*sum(diag(u[,,i]%*%t(v[,,j])))/sum(diag(v[,,j]%*%t(v[,,j])))
v[,,i]=v[,,i]- v[,,j]*sum(diag(u[,,i]%*%t(v[,,j])))/sum(diag(v[,,j]%*%t(v[,,j])))
v
j=2
Basis_T_SLd<-function(A=diag(3)){
dA=dim(A);d=dA[1];
#  Construct orthonormal basis for $T_I(SL(d))$
n=1;
E= array(0,c(d,d,d^2-1));
for (i in 1:d) {
for (j in setdiff((1:d),i)) {
E[i,j,n]= 1;
n=n+1;
}
if (n<=(d^2-1)) {
E[i,i,n]= 1;
E[d,d,n]= -1;
n=n+1;
}
}
if (sum(A== diag(d))==d*d){
EA=array(0,c(d,d,d^2-1)
for (j in 1:(d^2-1)) {
EA[,,j]=A%*%E[,,j];
}
# Orthonomralize using Gram Schmidt
u=EA;
v=array(0,c(d,d,d^2-1))
e=array(0,c(d,d,d^2-1))
v[,,1]=u[,,1];
e[,,1]=v[,,1]/sqrt(sum(diag(v[,,1]%*%t(v[,,1]))))
for (i in 2:(d^2-1)) {
v[,,i]=u[,,i]
for (j in 1:(i-1)) {
v[,,i]=v[,,i]- v[,,j]*sum(diag(u[,,i]%*%t(v[,,j])))/sum(diag(v[,,j]%*%t(v[,,j])))
}
e[,,i]=v[,,i]/sqrt(sum(diag(v[,,i]%*%t(v[,,i]))));
}
}
}
e[,,i]=v[,,i]/sqrt(sum(diag(v[,,i]%*%t(v[,,i]))));
v[,,i]=v[,,i]- v[,,j]*sum(diag(u[,,i]%*%t(v[,,j])))/sum(diag(v[,,j]%*%t(v[,,j])))
v[,,i]=u[,,i]
e[,,1]=v[,,1]/sqrt(sum(diag(v[,,1]%*%t(v[,,1]))))
u=EA;
v=array(0,c(d,d,d^2-1))
e=array(0,c(d,d,d^2-1))
v[,,1]=u[,,1];
e[,,1]=v[,,1]/sqrt(sum(diag(v[,,1]%*%t(v[,,1]))))
for (i in 2:(d^2-1)) {
v[,,i]=u[,,i]
for (j in 1:(i-1)) {
v[,,i]=v[,,i]- v[,,j]*sum(diag(u[,,i]%*%t(v[,,j])))/sum(diag(v[,,j]%*%t(v[,,j])))
}
e[,,i]=v[,,i]/sqrt(sum(diag(v[,,i]%*%t(v[,,i]))));
}
}
for (i in 2:(d^2-1)) {
v[,,i]=u[,,i]
for (j in 1:(i-1)) {
v[,,i]=v[,,i]- v[,,j]*sum(diag(u[,,i]%*%t(v[,,j])))/sum(diag(v[,,j]%*%t(v[,,j])))
}
e[,,i]=v[,,i]/sqrt(sum(diag(v[,,i]%*%t(v[,,i]))));
}
v
Basis_T_SLd<-function(A=diag(3)){
dA=dim(A);d=dA[1];
#  Construct orthonormal basis for $T_I(SL(d))$
n=1;
E= array(0,c(d,d,d^2-1));
for (i in 1:d) {
for (j in setdiff((1:d),i)) {
E[i,j,n]= 1;
n=n+1;
}
if (n<=(d^2-1)) {
E[i,i,n]= 1;
E[d,d,n]= -1;
n=n+1;
}
}
if (sum(A== diag(d))==d*d){
EA=array(0,c(d,d,d^2-1)
for (j in 1:(d^2-1)) {
EA[,,j]=A%*%E[,,j];
}
# Orthonomralize using Gram Schmidt
u=EA;
v=array(0,c(d,d,d^2-1))
e=array(0,c(d,d,d^2-1))
v[,,1]=u[,,1];
e[,,1]=v[,,1]/sqrt(sum(diag(v[,,1]%*%t(v[,,1]))))
for (i in 2:(d^2-1)) {
v[,,i]=u[,,i]
for (j in 1:(i-1)) {
v[,,i]=v[,,i]- v[,,j]*sum(diag(u[,,i]%*%t(v[,,j])))/sum(diag(v[,,j]%*%t(v[,,j])))
}
e[,,i]=v[,,i]/sqrt(sum(diag(v[,,i]%*%t(v[,,i]))));
}
}
}
Basis_T_SLd<-function(A=diag(3)){
dA=dim(A);d=dA[1];
#  Construct orthonormal basis for $T_I(SL(d))$
n=1;
E= array(0,c(d,d,d^2-1));
for (i in 1:d) {
for (j in setdiff((1:d),i)) {
E[i,j,n]= 1;
n=n+1;
}
if (n<=(d^2-1)) {
E[i,i,n]= 1;
E[d,d,n]= -1;
n=n+1;
}
}
if (sum(A== diag(d))==d*d){
EA=array(0,c(d,d,d^2-1)
for (j in 1:(d^2-1)) {
EA[,,j]=A%*%E[,,j];
}
# Orthonomralize using Gram Schmidt
u=EA;
v=array(0,c(d,d,d^2-1))
e=array(0,c(d,d,d^2-1))
v[,,1]=u[,,1];
e[,,1]=v[,,1]/sqrt(sum(diag(v[,,1]%*%t(v[,,1]))))
for (i in 2:(d^2-1)) {
v[,,i]=u[,,i]
for (j in 1:(i-1)) {
v[,,i]=v[,,i]- v[,,j]*sum(diag(u[,,i]%*%t(v[,,j])))/sum(diag(v[,,j]%*%t(v[,,j])))
}
e[,,i]=v[,,i]/sqrt(sum(diag(v[,,i]%*%t(v[,,i]))));
}
}
Basis_T_SLd<-function(A=diag(3)){
dA=dim(A);d=dA[1];
#  Construct orthonormal basis for $T_I(SL(d))$
n=1;
E= array(0,c(d,d,d^2-1));
for (i in 1:d) {
for (j in setdiff((1:d),i)) {
E[i,j,n]= 1;
n=n+1;
}
if (n<=(d^2-1)) {
E[i,i,n]= 1;
E[d,d,n]= -1;
n=n+1;
}
}
if (sum(A== diag(d))==d*d){
EA=array(0,c(d,d,d^2-1)
for (j in 1:(d^2-1)) {
EA[,,j]=A%*%E[,,j];
}
# Orthonomralize using Gram Schmidt
u=EA;
v=array(0,c(d,d,d^2-1))
e=array(0,c(d,d,d^2-1))
v[,,1]=u[,,1];
e[,,1]=v[,,1]/sqrt(sum(diag(v[,,1]%*%t(v[,,1]))))
for (i in 2:(d^2-1)) {
v[,,i]=u[,,i]
for (j in 1:(i-1)) {
v[,,i]=v[,,i]- v[,,j]*sum(diag(u[,,i]%*%t(v[,,j])))/sum(diag(v[,,j]%*%t(v[,,j])))
}
e[,,i]=v[,,i]/sqrt(sum(diag(v[,,i]%*%t(v[,,i]))));
}
Basis_T_SLd<-function(A=diag(3)) {
dA=dim(A);d=dA[1];
#  Construct orthonormal basis for $T_I(SL(d))$
n=1;
E= array(0,c(d,d,d^2-1));
for (i in 1:d) {
for (j in setdiff((1:d),i)) {
E[i,j,n]= 1;
n=n+1;
}
if (n<=(d^2-1)) {
E[i,i,n]= 1;
E[d,d,n]= -1;
n=n+1;
}
}
if (sum(A== diag(d))==d*d){
EA=array(0,c(d,d,d^2-1)
for (j in 1:(d^2-1)) {
EA[,,j]=A%*%E[,,j];
}
# Orthonomralize using Gram Schmidt
u=EA;
v=array(0,c(d,d,d^2-1))
e=array(0,c(d,d,d^2-1))
v[,,1]=u[,,1];
e[,,1]=v[,,1]/sqrt(sum(diag(v[,,1]%*%t(v[,,1]))))
for (i in 2:(d^2-1)) {
v[,,i]=u[,,i]
for (j in 1:(i-1)) {
v[,,i]=v[,,i]- v[,,j]*sum(diag(u[,,i]%*%t(v[,,j])))/sum(diag(v[,,j]%*%t(v[,,j])))
}
e[,,i]=v[,,i]/sqrt(sum(diag(v[,,i]%*%t(v[,,i]))));
}
}
}
Basis_T_SLd<-function(A=diag(3)) {
dA=dim(A);d=dA[1];
#  Construct orthonormal basis for $T_I(SL(d))$
n=1;
E= array(0,c(d,d,d^2-1));
for (i in 1:d) {
for (j in setdiff((1:d),i)) {
E[i,j,n]= 1;
n=n+1;
}
if (n<=(d^2-1)) {
E[i,i,n]= 1;
E[d,d,n]= -1;
n=n+1;
}
}
if (sum(A== diag(d))==d*d){
EA=array(0,c(d,d,d^2-1))
for (j in 1:(d^2-1)) {
EA[,,j]=A%*%E[,,j];
}
# Orthonomralize using Gram Schmidt
u=EA;
v=array(0,c(d,d,d^2-1))
e=array(0,c(d,d,d^2-1))
v[,,1]=u[,,1];
e[,,1]=v[,,1]/sqrt(sum(diag(v[,,1]%*%t(v[,,1]))))
for (i in 2:(d^2-1)) {
v[,,i]=u[,,i]
for (j in 1:(i-1)) {
v[,,i]=v[,,i]- v[,,j]*sum(diag(u[,,i]%*%t(v[,,j])))/sum(diag(v[,,j]%*%t(v[,,j])))
}
e[,,i]=v[,,i]/sqrt(sum(diag(v[,,i]%*%t(v[,,i]))));
}
}
}
Basis_T_SLd()
Basis_T_SLd<-function(A=diag(3)) {
dA=dim(A);d=dA[1];
#  Construct orthonormal basis for $T_I(SL(d))$
n=1;
E= array(0,c(d,d,d^2-1));
for (i in 1:d) {
for (j in setdiff((1:d),i)) {
E[i,j,n]= 1;
n=n+1;
}
if (n<=(d^2-1)) {
E[i,i,n]= 1;
E[d,d,n]= -1;
n=n+1;
}
}
EA=E
if (sum(A== diag(d))==d*d){
for (j in 1:(d^2-1)) {
EA[,,j]=A%*%E[,,j];
}
# Orthonomralize using Gram Schmidt
u=EA;
v=array(0,c(d,d,d^2-1))
e=array(0,c(d,d,d^2-1))
v[,,1]=u[,,1];
e[,,1]=v[,,1]/sqrt(sum(diag(v[,,1]%*%t(v[,,1]))))
for (i in 2:(d^2-1)) {
v[,,i]=u[,,i]
for (j in 1:(i-1)) {
v[,,i]=v[,,i]- v[,,j]*sum(diag(u[,,i]%*%t(v[,,j])))/sum(diag(v[,,j]%*%t(v[,,j])))
}
e[,,i]=v[,,i]/sqrt(sum(diag(v[,,i]%*%t(v[,,i]))));
}
}
return(EA)
}
Basis_T_SLd()
v=rnrom(d^2-1,0,1/3);
v=rnorm(d^2-1,0,1/3);
v
A=zeros(d,d);
A=matrix(0,d,d);
A
for (i in 1:(d^2-1)) {
A=A+v(i)*E(:,:,i);
}
for (i in 1:(d^2-1)) {
A=A+v[i]*E[,,i];
}
E= Basis_T_SL(diag(d));
v=rnorm(d^2-1,0,1/3);
A=matrix(0,d,d);
for (i in 1:(d^2-1)) {
A=A+v[i]*E[,,i];
}
A0=expm(A);
library("Matrix", lib.loc="/usr/lib/R/library")
library('Matrix')
function A0=sl_generator(d=3){
E= Basis_T_SL(diag(d));
v=rnorm(d^2-1,0,1/3);
A=matrix(0,d,d);
for (i in 1:(d^2-1)) {
A=A+v[i]*E[,,i];
}
A0=expm(A);
}
expm(A)
A0=matrix(expm(A))
A0
function A0=sl_generator(d=3) {
E= Basis_T_SL(diag(d));
v=rnorm(d^2-1,0,1/3);
A=matrix(0,d,d);
for (i in 1:(d^2-1)) {
A=A+v[i]*E[,,i]
}
A0=matrix(expm(A))
}
E= Basis_T_SL(diag(d))
v=rnorm(d^2-1,0,1/3)
A=matrix(0,d,d)
for (i in 1:(d^2-1)) {
A=A+v[i]*E[,,i]
}
A
A0=matrix(expm(A))
sl_generator<-function(d=3) {
E= Basis_T_SL(diag(d))
v=rnorm(d^2-1,0,1/3)
A=matrix(0,d,d)
for (i in 1:(d^2-1)) {
A=A+v[i]*E[,,i]
}
return(matrix(expm(A)))
}
sl_generator(3)
library('Matrix')
Basis_T_SLd<-function(A=diag(3)) {
dA=dim(A);d=dA[1];
#  Construct orthonormal basis for $T_I(SL(d))$
n=1;
E= array(0,c(d,d,d^2-1));
for (i in 1:d) {
for (j in setdiff((1:d),i)) {
E[i,j,n]= 1;
n=n+1;
}
if (n<=(d^2-1)) {
E[i,i,n]= 1;
E[d,d,n]= -1;
n=n+1;
}
}
EA=E
if (sum(A== diag(d))==d*d){
for (j in 1:(d^2-1)) {
EA[,,j]=A%*%E[,,j];
}
# Orthonomralize using Gram Schmidt
u=EA;
v=array(0,c(d,d,d^2-1))
e=array(0,c(d,d,d^2-1))
v[,,1]=u[,,1];
e[,,1]=v[,,1]/sqrt(sum(diag(v[,,1]%*%t(v[,,1]))))
for (i in 2:(d^2-1)) {
v[,,i]=u[,,i]
for (j in 1:(i-1)) {
v[,,i]=v[,,i]- v[,,j]*sum(diag(u[,,i]%*%t(v[,,j])))/sum(diag(v[,,j]%*%t(v[,,j])))
}
e[,,i]=v[,,i]/sqrt(sum(diag(v[,,i]%*%t(v[,,i]))));
}
}
return(EA)
}
sl_generator<-function(d=3) {
E= Basis_T_SLd(diag(d))
v=rnorm(d^2-1,0,1/3)
A=matrix(0,d,d)
for (i in 1:(d^2-1)) {
A=A+v[i]*E[,,i]
}
return(matrix(expm(A)))
}
sl_generator(3)
library('Matrix')
Basis_T_SLd<-function(A=diag(3)) {
dA=dim(A);d=dA[1];
#  Construct orthonormal basis for $T_I(SL(d))$
n=1;
E= array(0,c(d,d,d^2-1));
for (i in 1:d) {
for (j in setdiff((1:d),i)) {
E[i,j,n]= 1;
n=n+1;
}
if (n<=(d^2-1)) {
E[i,i,n]= 1;
E[d,d,n]= -1;
n=n+1;
}
}
EA=E
if (sum(A== diag(d))==d*d){
for (j in 1:(d^2-1)) {
EA[,,j]=A%*%E[,,j];
}
# Orthonomralize using Gram Schmidt
u=EA;
v=array(0,c(d,d,d^2-1))
e=array(0,c(d,d,d^2-1))
v[,,1]=u[,,1];
e[,,1]=v[,,1]/sqrt(sum(diag(v[,,1]%*%t(v[,,1]))))
for (i in 2:(d^2-1)) {
v[,,i]=u[,,i]
for (j in 1:(i-1)) {
v[,,i]=v[,,i]- v[,,j]*sum(diag(u[,,i]%*%t(v[,,j])))/sum(diag(v[,,j]%*%t(v[,,j])))
}
e[,,i]=v[,,i]/sqrt(sum(diag(v[,,i]%*%t(v[,,i]))));
}
}
return(EA)
}
sl_generator<-function(d=3) {
E= Basis_T_SLd(diag(d))
v=rnorm(d^2-1,0,1/3)
A=matrix(0,d,d)
for (i in 1:(d^2-1)) {
A=A+v[i]*E[,,i]
}
return(matrix(expm(A),d,d))
}
sl_generator(3)
sl_generator(3)
sl_generator(3)
sl_generator(3)
sl_generator(3)
A=sl_generator(3)
A%*%t(A)
det(A)
library('Matrix')
Basis_T_SLd<-function(A=diag(3)) {
dA=dim(A);d=dA[1];
#  Construct orthonormal basis for $T_I(SL(d))$
n=1;
E= array(0,c(d,d,d^2-1));
for (i in 1:d) {
for (j in setdiff((1:d),i)) {
E[i,j,n]= 1;
n=n+1;
}
if (n<=(d^2-1)) {
E[i,i,n]= 1;
E[d,d,n]= -1;
n=n+1;
}
}
EA=E
if (sum(A== diag(d))==d*d){
for (j in 1:(d^2-1)) {
EA[,,j]=A%*%E[,,j];
}
# Orthonomralize using Gram Schmidt
u=EA;
v=array(0,c(d,d,d^2-1))
e=array(0,c(d,d,d^2-1))
v[,,1]=u[,,1];
e[,,1]=v[,,1]/sqrt(sum(diag(v[,,1]%*%t(v[,,1]))))
for (i in 2:(d^2-1)) {
v[,,i]=u[,,i]
for (j in 1:(i-1)) {
v[,,i]=v[,,i]- v[,,j]*sum(diag(u[,,i]%*%t(v[,,j])))/sum(diag(v[,,j]%*%t(v[,,j])))
}
e[,,i]=v[,,i]/sqrt(sum(diag(v[,,i]%*%t(v[,,i]))));
}
}
return(EA)
}
sl_generator<-function(d=3) {
E= Basis_T_SLd(diag(d))
v=rnorm(d^2-1,0,1/3)
A=matrix(0,d,d)
for (i in 1:(d^2-1)) {
A=A+v[i]*E[,,i]
}
return(matrix(expm(A),d,d))
}
sl_generator(3)
sl_generator(4)
sl_generator(7)
sl_generator(7)
sl_generator(4)
sl_generator(7)
sl_generator(7)
sl_generator(7)
sl_generator(8)
sl_generator(8)
sl_generator(8)
sl_generator(8)
sl_generator(7)
sl_generator(7)
det(sl_generator(7))
det(sl_generator(7))
det(sl_generator(7))
